/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import gui.modelos.ModeloTablaAlarmas;
import gui.modelos.ModeloTablaEmpresas;
import modelos.Alarma;
import bolsa.Bolsa;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;
import com.rabbitmq.client.Delivery;
import definiciones.Definiciones;
import modelos.Empresa;
import herramientas.Herramientas;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author ruben
 */
public class App extends javax.swing.JFrame {
    
    private String QUEUE_NAME_SERVER = Definiciones.QUEUE_NAME_SERVER;
    
    private String QUEUE_NAME;
    
    private List<Empresa> listEmpresas;
    
    private List<Alarma> listAlarmas;
    
    private Empresa empresaSeleccionada;
    
    private static String USERNAME;

    private static Channel channel;
    /**
     * Creates new form App
     * 
     */
    
    
    public App() {
        initComponents();
        this.txtError.setVisible(false);
        listAlarmas = new ArrayList<>();
        
        loginPanel.setVisible(true);
        mainPanel.setVisible(false);
        botonSubida.setEnabled(false);
        botonBajada.setEnabled(false);
        
        txtError.setVisible(false);
        //letsGo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAlarmas = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEmpresas = new javax.swing.JTable();
        botonSubida = new javax.swing.JButton();
        botonBajada = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtEmpresaObjetivo = new javax.swing.JTextField();
        txtValorObjetivo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        buttonRefrescar = new javax.swing.JButton();
        txtError = new javax.swing.JLabel();
        loginPanel = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        buttonEnter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(645, 747));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu Mono", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Bolsa de Madrid");
        jLabel1.setName("jLabel1"); // NOI18N

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tablaAlarmas.setModel(new ModeloTablaAlarmas());
        tablaAlarmas.setName("tablaAlarmas"); // NOI18N
        tablaAlarmas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaAlarmasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaAlarmas);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaEmpresas.setModel(new ModeloTablaEmpresas());
        tablaEmpresas.setName("tablaEmpresas"); // NOI18N
        tablaEmpresas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEmpresasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaEmpresas);

        botonSubida.setText("↑");
        botonSubida.setName("botonSubida"); // NOI18N
        botonSubida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSubidaActionPerformed(evt);
            }
        });

        botonBajada.setText("↓");
        botonBajada.setName("botonBajada"); // NOI18N
        botonBajada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBajadaActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Alarmas");
        jLabel2.setName("jLabel2"); // NOI18N

        txtEmpresaObjetivo.setEditable(false);
        txtEmpresaObjetivo.setName("txtEmpresaObjetivo"); // NOI18N
        txtEmpresaObjetivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpresaObjetivoActionPerformed(evt);
            }
        });

        txtValorObjetivo.setName("txtValorObjetivo"); // NOI18N
        txtValorObjetivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorObjetivoActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Valor Objetivo");
        jLabel3.setName("jLabel3"); // NOI18N

        buttonRefrescar.setText("Recargar");
        buttonRefrescar.setName("buttonRefrescar"); // NOI18N
        buttonRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefrescarActionPerformed(evt);
            }
        });

        txtError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtError.setText("¡¡Error!!");
        txtError.setName("txtError"); // NOI18N

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, mainPanelLayout.createSequentialGroup()
                                .add(txtEmpresaObjetivo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(45, 45, 45)
                                .add(txtValorObjetivo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(56, 56, 56)
                                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(26, 26, 26)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(botonSubida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, Short.MAX_VALUE)
                                .add(botonBajada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(txtError, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(78, 78, 78)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(buttonRefrescar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 179, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonRefrescar)
                    .add(jLabel2))
                .add(12, 12, 12)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(16, 16, 16)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(txtError))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtEmpresaObjetivo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtValorObjetivo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(botonSubida)
                    .add(botonBajada))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loginPanel.setName("loginPanel"); // NOI18N

        txtUsername.setName("txtUsername"); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Username");
        jLabel5.setName("jLabel5"); // NOI18N

        buttonEnter.setText("Enter");
        buttonEnter.setName("buttonEnter"); // NOI18N
        buttonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnterActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout loginPanelLayout = new org.jdesktop.layout.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(loginPanelLayout.createSequentialGroup()
                .add(loginPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(loginPanelLayout.createSequentialGroup()
                        .add(69, 69, 69)
                        .add(loginPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(txtUsername)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)))
                    .add(loginPanelLayout.createSequentialGroup()
                        .add(145, 145, 145)
                        .add(buttonEnter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(loginPanelLayout.createSequentialGroup()
                .add(194, 194, 194)
                .add(jLabel5)
                .add(36, 36, 36)
                .add(txtUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(45, 45, 45)
                .add(buttonEnter)
                .addContainerGap(176, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .add(loginPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(24, 24, 24)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(24, 24, 24)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(144, 144, 144)
                .add(mainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 484, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(117, Short.MAX_VALUE)
                    .add(loginPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(42, 42, 42)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(571, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtValorObjetivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorObjetivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorObjetivoActionPerformed

    private void botonSubidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSubidaActionPerformed
        // TODO add your handling code here:
        try{
            this.txtError.setVisible(false);
            anhadirAlarma(this.empresaSeleccionada,Double.parseDouble(this.txtValorObjetivo.getText()),Definiciones.SUBIDA);
            this.txtValorObjetivo.setText("");
        }catch(Exception e){
            this.txtError.setVisible(true);
        }
    }//GEN-LAST:event_botonSubidaActionPerformed

    private void txtEmpresaObjetivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpresaObjetivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpresaObjetivoActionPerformed

    private void botonBajadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBajadaActionPerformed
        // TODO add your handling code here:
        try{
            this.txtError.setVisible(false);
            anhadirAlarma(this.empresaSeleccionada,Double.parseDouble(this.txtValorObjetivo.getText()),Definiciones.BAJADA);
            this.txtValorObjetivo.setText("");
        }catch(Exception e){
            this.txtError.setVisible(true);
        }
    }//GEN-LAST:event_botonBajadaActionPerformed

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void tablaAlarmasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAlarmasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaAlarmasMouseClicked

    private void tablaEmpresasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEmpresasMouseClicked
        // TODO add your handling code here:
        txtError.setVisible(false);
        this.actualizarEmpresaSeleccionada();
    }//GEN-LAST:event_tablaEmpresasMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //letsGo();
        //subscribir();
        //actualizarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void buttonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnterActionPerformed
        // TODO add your handling code here:
        USERNAME = txtUsername.getText();
        mainPanel.setVisible(true);
        loginPanel.setVisible(false);
        entrarSistema();
    }//GEN-LAST:event_buttonEnterActionPerformed

    private void buttonRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefrescarActionPerformed
        // TODO add your handling code here:
        txtError.setVisible(false);
        empresaSeleccionada = null;
        txtEmpresaObjetivo.setText("");
        txtValorObjetivo.setText("");
        try{
            String message = Herramientas.generarMensaje(Definiciones.TIPO_LISTA_EMPRESAS,QUEUE_NAME);
            channel.basicPublish("", QUEUE_NAME_SERVER, null, message.getBytes(StandardCharsets.UTF_8));
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_buttonRefrescarActionPerformed

    /**
     * @param args the command line arguments
     */
    

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
                
            }
        });
                
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBajada;
    private javax.swing.JButton botonSubida;
    private javax.swing.JButton buttonEnter;
    private javax.swing.JButton buttonRefrescar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable tablaAlarmas;
    private javax.swing.JTable tablaEmpresas;
    private javax.swing.JTextField txtEmpresaObjetivo;
    private javax.swing.JLabel txtError;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtValorObjetivo;
    // End of variables declaration//GEN-END:variables

    
    private void entrarSistema(){
        QUEUE_NAME = USERNAME;
        ConnectionFactory factory = new ConnectionFactory();

        factory.setHost("localhost");
        try {
            Connection connection = factory.newConnection();
            channel = connection.createChannel();
            // deeclaramos una cola a la que enviar
            channel.queueDeclare(QUEUE_NAME_SERVER, false, false, false, null);
            channel.queueDeclare(QUEUE_NAME, false, false, false, null);
            // el mensaje a enviar

            String message = Herramientas.generarMensaje(Definiciones.TIPO_SUBSCRIPCION,QUEUE_NAME);
            channel.basicPublish("", QUEUE_NAME_SERVER, null, message.getBytes(StandardCharsets.UTF_8));
            System.out.println("[x] -- Subscrito");

            DeliverCallback deliverCallback;
            deliverCallback = new DeliverCallback() {
                @Override
                public void handle(String consumerTag, Delivery delivery) throws IOException {
                    String message = new String(delivery.getBody(), "UTF-8");
                    switch(Herramientas.getTipo(message)){
                        case Definiciones.TIPO_SUBSCRIPCION:
                            System.out.println("RECIBIDO: " + message);
                            listEmpresas = Herramientas.getListEmpresas(message);
                            listAlarmas = Herramientas.getListAlarmas(message);
                            actualizarTablaEmpresas();
                            actualizarTablaAlarmas();
                            break;
                        case Definiciones.TIPO_LISTA_EMPRESAS:
                            listEmpresas = Herramientas.getListEmpresas(message);
                            listAlarmas = Herramientas.getListAlarmas(message);
                            actualizarTablaEmpresas();
                            break;
                        case Definiciones.TIPO_AVISO_ALARMAS:
                            notificarAlarma(Herramientas.getAlarma(message));
                            actualizarTablaAlarmas();
                            break;
                        case Definiciones.TIPO_LISTA_ALARMAS:
                            break;
                        case Definiciones.TIPO_NUEVA_ALARMA:
                            List<Alarma> alarmasServidor = Herramientas.getListAlarmas(message);
                            actualizarListaAlarmas(alarmasServidor);
                            break;
                    }
                    System.out.println(message);
                }
            };
            System.out.println(QUEUE_NAME);
            channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> {});
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void recargarTablaEmpresas(){
        try{
            String message = Herramientas.generarMensaje(Definiciones.TIPO_LISTA_EMPRESAS,QUEUE_NAME);
            channel.basicPublish("", QUEUE_NAME_SERVER, null, message.getBytes(StandardCharsets.UTF_8));
        }catch(Exception e){
            System.out.println(e);
        }
        
    }
    
    private void actualizarTablaEmpresas(){
        ((ModeloTablaEmpresas) tablaEmpresas.getModel()).setFilas(listEmpresas);
    } 
    
    private final void actualizarEmpresaSeleccionada() {
        ModeloTablaEmpresas m;
        m = (ModeloTablaEmpresas) this.tablaEmpresas.getModel();
        int fila = this.tablaEmpresas.getSelectedRow();
        if (fila != -1) {
            this.empresaSeleccionada = m.obtenerEmpresa(fila);
            this.txtEmpresaObjetivo.setText(this.empresaSeleccionada.getNombre());
            this.botonBajada.setEnabled(true);
            this.botonSubida.setEnabled(true);
        }else{
            this.empresaSeleccionada = null;
            this.txtEmpresaObjetivo.setText("");
            this.botonBajada.setEnabled(false);
            this.botonSubida.setEnabled(false);
        }
    }
    
    private void anhadirAlarma(Empresa empresa, double valor, int tipo){
        Alarma a = new Alarma(this.empresaSeleccionada,valor,tipo);
        try{
            String message = Herramientas.generarMensaje(Definiciones.TIPO_NUEVA_ALARMA,QUEUE_NAME,this.empresaSeleccionada.toString(),a.toString());
            channel.basicPublish("", QUEUE_NAME_SERVER, null, message.getBytes(StandardCharsets.UTF_8));
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    private void notificarAlarma(Alarma alarma){
        boolean flag = false;
        for(Alarma a: listAlarmas){
            if(a.getId().equals(alarma.getId())){
                a.setFinalizada(true);
                flag = true;
                break;
            }
        }
        if(!flag){
            listAlarmas.add(alarma);
        }
        actualizarTablaAlarmas();
    }
    
    public void actualizarTablaAlarmas(){
        ModeloTablaAlarmas m;
        m = (ModeloTablaAlarmas) this.tablaAlarmas.getModel();
        m.setFilas(listAlarmas);
    }
    
    public void actualizarListaAlarmas(List<Alarma> alarmas){
        List<Alarma> newList = new ArrayList<>();
        Boolean flag = false;
        for(Alarma aServer: alarmas){
            for(Alarma aLocal: listAlarmas){
                if(aServer.getId().equals(aLocal.getId())){
                    aLocal.setFinalizada(aServer.isFinalizada());
                    flag = true;
                    break;
                }
            }
            if(!flag){
                newList.add(aServer);
            }
        }
        for(Alarma aLocal: listAlarmas){
            newList.add(aLocal);
        }
        listAlarmas = newList;
        
        actualizarTablaAlarmas();
    }
}

    

